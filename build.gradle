plugins {
    id 'java'
    id 'maven-publish'
    id("io.github.goooler.shadow") version "8.1.7"
}

ext {
    baseVersion = '1.0.0'
    channel = 'SNAPSHOT'

    invui_version = invui_version.toString();
    bstats_version = bstats_version.toString();
    skullcreator_version = skullcreator_version.toString();
    adventure_bundle_version = adventure_bundle_version.toString();
    adventure_platform_version = adventure_platform_version.toString();
    hikari_version = hikari_version.toString();
    worldedit_version = worldedit_version.toString();
}

group = 'com.chunkslab.realms'
version = getVersion()

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.github.goooler.shadow'

    group rootProject.group
    version rootProject.version

    repositories {
        mavenCentral()
        maven { url 'https://repo.papermc.io/repository/maven-public/' }
        maven { url 'https://oss.sonatype.org/content/groups/public/' }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.34'
        annotationProcessor 'org.projectlombok:lombok:1.18.34'
    }

    build {
        dependsOn shadowJar
    }
}

subprojects {
    apply plugin: 'maven-publish'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.rapture.pw/repository/maven-snapshots/' }
    maven { url 'https://repo.triumphteam.dev/snapshots/' }
    maven { url "https://storehouse.okaeri.eu/repository/maven-public/" }
    maven { url 'https://repo.xenondevs.xyz/releases' }
    maven { url 'https://maven.enginehub.org/repo/' }
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven { url 'https://github.com/deanveloper/SkullCreator/raw/mvn-repo/' }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT")
    implementation project(':api')
    implementation project(':folia')

    implementation("dev.triumphteam:triumph-cmd-bukkit:${rootProject.properties['triumph_cmd_version']}") {
        exclude group: "com.google.code.gson"
    }
    implementation("eu.okaeri:okaeri-configs-yaml-bukkit:${rootProject.properties['okaeri_config_version']}")
    implementation("org.bstats:bstats-bukkit:${rootProject.properties['bstats_version']}")
    implementation("org.bstats:bstats-base:${rootProject.properties['bstats_version']}")
    implementation("dev.dbassett:skullcreator:${rootProject.properties['skullcreator_version']}")

    compileOnly("net.kyori:adventure-api:${rootProject.properties['adventure_bundle_version']}")
    compileOnly("net.kyori:adventure-text-minimessage:${rootProject.properties['adventure_bundle_version']}")
    compileOnly("net.kyori:adventure-text-serializer-legacy:${rootProject.properties['adventure_bundle_version']}")
    compileOnly("net.kyori:adventure-platform-bukkit:${rootProject.properties['adventure_platform_version']}")

    compileOnly("xyz.xenondevs.invui:invui:${rootProject.properties['invui_version']}")
    compileOnly("me.clip:placeholderapi:${rootProject.properties['placeholder_api_version']}")

    compileOnly("com.sk89q.worldedit:worldedit-bukkit:${rootProject.properties['worldedit_version']}")
    compileOnly("com.zaxxer:HikariCP:${rootProject.properties['hikari_version']}")
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [
            'version': version,
            'invui_version': project.ext.invui_version,
            'bstats_version': project.ext.bstats_version,
            'adventure_bundle_version': project.ext.adventure_bundle_version,
            'adventure_platform_version': project.ext.adventure_platform_version,
            'hikari_version': project.ext.hikari_version,
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching(['**/*.json', '**/*.yml', '**/*.properties']) {
        expand props
    }
}

tasks.register("cleanTarget") {
    doFirst {
        def targetDir = file("$rootDir/target")
        if (targetDir.exists()) {
            targetDir.deleteDir()
        }
    }
}

tasks.named("clean") {
    dependsOn("cleanTarget")
}

shadowJar {
    dependsOn(jar)
    dependsOn(cleanTarget)

    archiveFileName = "Realms v${archiveVersion.get()}.jar"
    destinationDirectory.set(file("$rootDir/target"))

    relocate 'dev.triumphteam.cmd', 'com.chunkslab.realms.libraries.triumphteam'
    relocate 'eu.okaeri', 'com.chunkslab.realms.libraries.okaeri'
    relocate 'org.bstats', 'com.chunkslab.realms.libraries.bstats'
    relocate 'dev.dbassett', 'com.chunkslab.realms.libraries.dbassett'
    relocate 'com.zaxxer', 'com.chunkslab.realms.libraries.zaxxer'

    manifest {
        attributes(
                "Built-By": System.getProperty("user.name"),
                "Version": project.version,
                "Build-Timestamp": new java.text.SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss.SSSZ").format(new Date()),
                "Created-By": "Gradle ${gradle.gradleVersion}",
                "Build-Jdk": "${System.getProperty("java.version")} ${System.getProperty("java.vendor")} ${System.getProperty("java.vm.version")}",
                "Build-OS": "${System.getProperty("os.name")} ${System.getProperty("os.arch")} ${System.getProperty("os.version")}",
                "Compiled": (project.findProperty("realms_compiled")?.toString() ?: "true")
        )
    }

    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

shadowJar.shouldRunAfter build

tasks.shadowJar {
    doLast {
        file("${rootDir}/libs/${project.name}-${project.version}.jar").delete()
    }
}

project(":api") {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.baseVersion
                artifact shadowJar
            }
        }
        repositories {
            maven {
                url = uri(getRepositoryURL())
                credentials {
                    username = System.getenv("VOXELARC_REPO_USERNAME")
                    password = System.getenv("VOXELARC_REPO_PASSWORD")
                }
            }
        }
    }
}

def getGitCommitHash() {
    try {
        def process = new ProcessBuilder('git', 'rev-parse', '--short', 'HEAD')
                .redirectErrorStream(true)
                .start()
        process.waitFor()
        return '-' + process.inputStream.text.trim()
    } catch (Exception e) {
        return '-unknown'
    }
}

def getVersion() {
    def finalVersion = baseVersion
    if (channel && !channel.isEmpty()) {
        finalVersion += "-${channel}"
    }
    def includeHash = System.getenv("INCLUDE_GIT_HASH")
    if ((includeHash == null || includeHash.toBoolean()) && channel != "DEVELOPMENT") {
        finalVersion += getGitCommitHash()
    }
    return finalVersion
}

def getRepositoryURL() {
    if (channel.contains("SNAPSHOT")) {
        return "https://repo.voxelarc.net/snapshots/"
    } else if (channel.contains("DEVELOPMENT")) {
        return "https://repo.voxelarc.net/development/"
    } else {
        return "https://repo.voxelarc.net/releases/"
    }
}